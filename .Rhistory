} else {
ggscatter(plot_dat, x = x, y = y, add = 'reg.line', color = color)+
stat_cor(label.x = 0, label.y = max(plot_dat[y])*1.1)+
stat_smooth(method = 'lm')+
labs(x = paste(x, var_exp[x]))
}
}
}
plot_pca(dat2, plot_type = 'scatter')
library(ggpubr)
plot_pca(dat2, plot_type = 'scatter')
plot_pca(dat2, plot_type = 'boxplot')
#' Takes an OmicsAnalyst formatted data.frame and returns a data.frame prepared for PCA analysis
#' @param x a data.frame
#' @param legend.hjust adjusts horizontal justification of PCA plot legend
#' @import stats
#' @import ggplot2
#' @import dplyr
#' @import ggpubr
#' @import tibble
#' @export
plot_pca = function(dat, metadata = NULL, samples_var_name = 'Sample', plotting_factors_name = Group, plotting_factors_in = 'col_names', x = 'PC1', y = 'PC2', scale = T, center = T, color = 'Group', fill = 'Group', plot_type = '2D', summarise_for_scatter = T) {
plotting_factors_name = enquo(plotting_factors_name)
# samples_var_name = enquo(samples_var_name)
if(plotting_factors_in == 'col_names') {
dat = t(dat) %>%
as.data.frame() %>%
mutate(across(everything(), as.numeric)) %>%
scale(scale = scale, center = center) %>%
as.matrix()
} else {
dat = dat %>%
as.data.frame() %>%
column_to_rownames(var = group) %>%
select_if(is.character) %>%
mutate(across(everything(), as.numeric)) %>%
scale(scale = scale, center = center) %>%
as.matrix()
}
dat = prcomp(dat, scale = F, center = F)
scores = dat$x
eigs = dat$sdev^2
var_exp = paste('(', formatC((eigs/sum(eigs))*100, format = 'f', digits = 2), '%', ')', sep = '')
names(var_exp) = colnames(scores)
if(is.null(metadata)){
plot_dat = scores %>%
data.frame() %>%
rownames_to_column(var = samples_var_name) %>%
mutate(!!plotting_factors_name := gsub('..$', '', get(samples_var_name)))
} else {
plot_dat = scores %>%
data.frame() %>%
rownames_to_column(var = samples_var_name) %>%
mutate(!!plotting_factors_name := gsub('..$', '', get(samples_var_name))) %>%
left_join(metadata)
}
if(plot_type == '2D') {
p = ggplot(plot_dat, aes(get(x), get(y), color = get(color), group = !!plotting_factors_name, fill = get(fill)))+
geom_point()+
stat_ellipse(geom = 'polygon', alpha = 0.5, level = 0.65)+
# ggforce::geom_mark_ellipse(aes(fill = get(fill), label = !!plotting_factors_name))+
geom_text(aes(label = !!plotting_factors_name), color = 'black', size = 2.5)+
labs(x = paste(x, var_exp[x]), y = paste(y, var_exp[y]), fill = color, color = color)
return(p)
}
if(plot_type == 'boxplot') {
p = ggplot(plot_dat, aes(reorder(!!plotting_factors_name, get(x)), get(x), fill = get(fill)))+
geom_boxplot()+
labs(x = color, y = paste(x, var_exp[x]), fill = color)
return(p)
}
if(plot_type == 'scatter') {
if(summarise_for_scatter == T) {
plot_dat = plot_dat %>%
group_by(!!plotting_factors_name) %>%
summarise_if(is.numeric, mean)
ggscatter(plot_dat, x = x, y = y, add = 'reg.line', color = color)+
stat_cor(label.x = 0, label.y = max(plot_dat[y])*1.1)+
stat_smooth(method = 'lm')+
labs(x = paste(x, var_exp[x]))
} else {
ggscatter(plot_dat, x = x, y = y, add = 'reg.line', color = color)+
stat_cor(label.x = 0, label.y = max(plot_dat[y])*1.1)+
stat_smooth(method = 'lm')+
labs(x = paste(x, var_exp[x]))
}
}
}
plot_pca(dat2, plot_type = 'boxplot')
plot_pca(dat2, plot_type = 'scatter', summarise_for_scatter = F)
metadata = fread("C:/Users/hsaxe/OneDrive/Documents/ALAB/Transcriptome_data/Root/R/Phenotyping/SCRI/LongList3_2Y.csv", stringsAsFactors = T)
plot_pca(dat2, plot_type = 'scatter', x = 'PC1', y = 'CG_Avg.', summarise_for_scatter = F)
plot_pca(dat2, metadata = metadata, plot_type = 'scatter', x = 'PC1', y = 'CG_Avg.', summarise_for_scatter = F)
View(metadata)
metadata = data.frame(Sample = colnames(dat)[colnames(dat) != 'GeneID']) %>%
mutate(Hybrid = as.factor(gsub("\\-\\d$", "", Sample))) %>%
left_join(metadata, by = c('Hybrid' = 'CAL:_Wip_ID...1'))
row.names(metadata) = metadata$Sample
head(metadata)
plot_pca(dat2, metadata = metadata, plot_type = 'scatter', x = 'PC1', y = 'CG_Avg.', summarise_for_scatter = F)
plot_pca(dat2, metadata = metadata, plot_type = 'scatter', x = 'PC1', y = 'CG_Avg.', summarise_for_scatter = T)
#' Takes a data.frame, replaces any missing value(s) with zeros, optionally performs counts per million (CPM) normalization, calculates the row-wise statistic provided by FilterFun, and filters the data with above the FilterThreshold or keeps only the top n provided by RankThreshold. The raw data is returned (not CPM normalized).
#' @param dat A data.frame
#' @param CPM Logical. Whether or not to normalize columns by CPM
#' @param FilterFUN Row-wise function to use for filtering (mean, max, median, IQR, etc..).
#' @param FilterThreshold Threshold value. Features with FilterFUN output higher than this value will be kept.
#' @param RankThreshold Threshold value. Features will be ranked with FilterFUN and the top n values provided by RankThreshold will be kept.
#' @import DescTools
#' @import tibble
#' @export
expression_filter <- function(dat, CPM = TRUE, FilterFUN = mean, FilterThreshold = NULL, RankThreshold = NULL){
message('Make sure no numeric identifiers are in data as this will negatively impact filtering')
iqrs <- NULL
a <- as.data.frame(dat)
if(any(sapply(a, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
if(any(is.na(a))){
print(paste(sum(is.na(a)), "missing value(s) replaced with zeros"))
} else {
print("Data has no missing values")
}
if(any(is.na(a))){a[is.na(a)] <- 0}
if(CPM == T) {cpm = a %>% edgeR::cpm() %>% as.data.frame()}
FilterFUN = enquo(FilterFUN)
if(is.null(FilterThreshold) & is.null(RankThreshold) | !is.null(FilterThreshold) & !is.null(RankThreshold)) {
stop('Please provide EITHER FilterThreshold OR RankThreshold')
}
if(!is.null(FilterThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
filter(!!FilterFUN >= FilterThreshold)
print(paste("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " threshold of ", FilterThreshold))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
} else {
if(!is.null(RankThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
arrange(desc(!!FilterFUN)) %>%
head(n = RankThreshold)
print(paste("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " rank threshold of ", RankThreshold))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
}
}
}
dat2 = expression_filter(dat = dat)
dat2 = expression_filter(dat = dat, FilterFUN = mean, FilterThreshold = 20)
#' Takes a data.frame, replaces any missing value(s) with zeros, optionally performs counts per million (CPM) normalization, calculates the row-wise statistic provided by FilterFun, and filters the data with above the FilterThreshold or keeps only the top n provided by RankThreshold. The raw data is returned (not CPM normalized).
#' @param dat A data.frame
#' @param CPM Logical. Whether or not to normalize columns by CPM
#' @param FilterFUN Row-wise function to use for filtering (mean, max, median, IQR, etc..).
#' @param FilterThreshold Threshold value. Features with FilterFUN output higher than this value will be kept.
#' @param RankThreshold Threshold value. Features will be ranked with FilterFUN and the top n values provided by RankThreshold will be kept.
#' @import DescTools
#' @import tibble
#' @export
expression_filter <- function(dat, CPM = TRUE, FilterFUN = mean, FilterThreshold = NULL, RankThreshold = NULL){
message('Make sure no numeric identifiers are in data as this will negatively impact filtering')
iqrs <- NULL
a <- as.data.frame(dat)
if(any(sapply(a, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
if(any(is.na(a))){
print(paste(sum(is.na(a)), "missing value(s) replaced with zeros"))
} else {
print("Data has no missing values")
}
if(any(is.na(a))){a[is.na(a)] <- 0}
if(CPM == T) {cpm = a %>% edgeR::cpm() %>% as.data.frame()}
FilterFUN = enquo(FilterFUN)
if(is.null(FilterThreshold) & is.null(RankThreshold) | !is.null(FilterThreshold) & !is.null(RankThreshold)) {
stop('Please provide EITHER FilterThreshold OR RankThreshold')
}
if(!is.null(FilterThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
filter(!!FilterFUN >= FilterThreshold)
print(paste("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " threshold of ", FilterThreshold), nrow(final), ' remaining')
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
} else {
if(!is.null(RankThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
arrange(desc(!!FilterFUN)) %>%
head(n = RankThreshold)
print(paste("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " rank threshold of ", RankThreshold), nrow(final), ' remaining')
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
}
}
}
dat2 = expression_filter(dat = dat, FilterFUN = mean, FilterThreshold = 20)
#' Takes a data.frame, replaces any missing value(s) with zeros, optionally performs counts per million (CPM) normalization, calculates the row-wise statistic provided by FilterFun, and filters the data with above the FilterThreshold or keeps only the top n provided by RankThreshold. The raw data is returned (not CPM normalized).
#' @param dat A data.frame
#' @param CPM Logical. Whether or not to normalize columns by CPM
#' @param FilterFUN Row-wise function to use for filtering (mean, max, median, IQR, etc..).
#' @param FilterThreshold Threshold value. Features with FilterFUN output higher than this value will be kept.
#' @param RankThreshold Threshold value. Features will be ranked with FilterFUN and the top n values provided by RankThreshold will be kept.
#' @import DescTools
#' @import tibble
#' @export
expression_filter <- function(dat, CPM = TRUE, FilterFUN = mean, FilterThreshold = NULL, RankThreshold = NULL){
message('Make sure no numeric identifiers are in data as this will negatively impact filtering')
iqrs <- NULL
a <- as.data.frame(dat)
if(any(sapply(a, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
if(any(is.na(a))){
print(paste(sum(is.na(a)), "missing value(s) replaced with zeros"))
} else {
print("Data has no missing values")
}
if(any(is.na(a))){a[is.na(a)] <- 0}
if(CPM == T) {cpm = a %>% edgeR::cpm() %>% as.data.frame()}
FilterFUN = enquo(FilterFUN)
if(is.null(FilterThreshold) & is.null(RankThreshold) | !is.null(FilterThreshold) & !is.null(RankThreshold)) {
stop('Please provide EITHER FilterThreshold OR RankThreshold')
}
if(!is.null(FilterThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
filter(!!FilterFUN >= FilterThreshold)
print(paste("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " threshold of ", FilterThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
} else {
if(!is.null(RankThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
arrange(desc(!!FilterFUN)) %>%
head(n = RankThreshold)
print(paste("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " rank threshold of ", RankThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
}
}
}
dat2 = expression_filter(dat = dat, FilterFUN = mean, FilterThreshold = 20)
#' Takes a data.frame, replaces any missing value(s) with zeros, optionally performs counts per million (CPM) normalization, calculates the row-wise statistic provided by FilterFun, and filters the data with above the FilterThreshold or keeps only the top n provided by RankThreshold. The raw data is returned (not CPM normalized).
#' @param dat A data.frame
#' @param CPM Logical. Whether or not to normalize columns by CPM
#' @param FilterFUN Row-wise function to use for filtering (mean, max, median, IQR, etc..).
#' @param FilterThreshold Threshold value. Features with FilterFUN output higher than this value will be kept.
#' @param RankThreshold Threshold value. Features will be ranked with FilterFUN and the top n values provided by RankThreshold will be kept.
#' @import DescTools
#' @import tibble
#' @export
expression_filter <- function(dat, CPM = TRUE, FilterFUN = mean, FilterThreshold = NULL, RankThreshold = NULL){
message('Make sure no numeric identifiers are in data as this will negatively impact filtering')
iqrs <- NULL
a <- as.data.frame(dat)
if(any(sapply(a, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
if(any(is.na(a))){
print(paste(sum(is.na(a)), "missing value(s) replaced with zeros"))
} else {
print("Data has no missing values")
}
if(any(is.na(a))){a[is.na(a)] <- 0}
if(CPM == T) {cpm = a %>% edgeR::cpm() %>% as.data.frame()}
FilterFUN = enquo(FilterFUN)
if(is.null(FilterThreshold) & is.null(RankThreshold) | !is.null(FilterThreshold) & !is.null(RankThreshold)) {
stop('Please provide EITHER FilterThreshold OR RankThreshold')
}
if(!is.null(FilterThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
filter(!!FilterFUN >= FilterThreshold)
print(paste0("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " threshold of ", FilterThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
} else {
if(!is.null(RankThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
arrange(desc(!!FilterFUN)) %>%
head(n = RankThreshold)
print(paste0("Removed", (nrow(a)) - (nrow(final)), "features based on ", as_label(FilterFUN), " rank threshold of ", RankThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
}
}
}
dat2 = expression_filter(dat = dat, FilterFUN = mean, FilterThreshold = 20)
#' Takes a data.frame, replaces any missing value(s) with zeros, optionally performs counts per million (CPM) normalization, calculates the row-wise statistic provided by FilterFun, and filters the data with above the FilterThreshold or keeps only the top n provided by RankThreshold. The raw data is returned (not CPM normalized).
#' @param dat A data.frame
#' @param CPM Logical. Whether or not to normalize columns by CPM
#' @param FilterFUN Row-wise function to use for filtering (mean, max, median, IQR, etc..).
#' @param FilterThreshold Threshold value. Features with FilterFUN output higher than this value will be kept.
#' @param RankThreshold Threshold value. Features will be ranked with FilterFUN and the top n values provided by RankThreshold will be kept.
#' @import DescTools
#' @import tibble
#' @export
expression_filter <- function(dat, CPM = TRUE, FilterFUN = mean, FilterThreshold = NULL, RankThreshold = NULL){
message('Make sure no numeric identifiers are in data as this will negatively impact filtering')
iqrs <- NULL
a <- as.data.frame(dat)
if(any(sapply(a, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
if(any(is.na(a))){
print(paste(sum(is.na(a)), "missing value(s) replaced with zeros"))
} else {
print("Data has no missing values")
}
if(any(is.na(a))){a[is.na(a)] <- 0}
if(CPM == T) {cpm = a %>% edgeR::cpm() %>% as.data.frame()}
FilterFUN = enquo(FilterFUN)
if(is.null(FilterThreshold) & is.null(RankThreshold) | !is.null(FilterThreshold) & !is.null(RankThreshold)) {
stop('Please provide EITHER FilterThreshold OR RankThreshold')
}
if(!is.null(FilterThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
filter(!!FilterFUN >= FilterThreshold)
print(paste0("Removed ", (nrow(a)) - (nrow(final)), " features based on ", as_label(FilterFUN), " threshold of ", FilterThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
} else {
if(!is.null(RankThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
arrange(desc(!!FilterFUN)) %>%
head(n = RankThreshold)
print(paste0("Removed ", (nrow(a)) - (nrow(final)), " features based on ", as_label(FilterFUN), " rank threshold of ", RankThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
}
}
}
dat2 = expression_filter(dat = dat, FilterFUN = mean, FilterThreshold = 20)
install.packages('DescTools')
usethis::use_package('edgeR')
?head
?reorder
View(dat)
#' @param CPM Logical. Whether or not to normalize columns by CPM
#' @param FilterFUN Row-wise function to use for filtering (mean, max, median, IQR, etc..).
#' @param FilterThreshold Threshold value. Features with FilterFUN output higher than this value will be kept.
#' @param RankThreshold Threshold value. Features will be ranked with FilterFUN and the top n values provided by RankThreshold will be kept.
#' @import dplyr
#' @importFrom dplyr filter
#' @importFrom rlang :=
#' @importFrom stats prcomp reorder
#' @importFrom utils head
#' @export
expression_filter <- function(dat, CPM = TRUE, FilterFUN = mean, FilterThreshold = NULL, RankThreshold = NULL){
message('Make sure no numeric identifiers are in data as this will negatively impact filtering')
iqrs <- . <- ID <- Group <- NULL
a <- as.data.frame(dat)
if(any(sapply(a, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
if(any(is.na(a))){
print(paste(sum(is.na(a)), "missing value(s) replaced with zeros"))
} else {
print("Data has no missing values")
}
if(any(is.na(a))){a[is.na(a)] <- 0}
if(CPM == T) {cpm = a %>% edgeR::cpm() %>% as.data.frame()}
FilterFUN = enquo(FilterFUN)
if(is.null(FilterThreshold) & is.null(RankThreshold) | !is.null(FilterThreshold) & !is.null(RankThreshold)) {
stop('Please provide EITHER FilterThreshold OR RankThreshold')
}
if(!is.null(FilterThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
filter(!!FilterFUN >= FilterThreshold)
print(paste0("Removed ", (nrow(a)) - (nrow(final)), " features based on ", as_label(FilterFUN), " threshold of ", FilterThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
} else {
if(!is.null(RankThreshold)) {
final = cpm %>%
mutate(!!FilterFUN := apply(., 1, !!FilterFUN)) %>%
arrange(desc(!!FilterFUN)) %>%
head(n = RankThreshold)
print(paste0("Removed ", (nrow(a)) - (nrow(final)), " features based on ", as_label(FilterFUN), " rank threshold of ", RankThreshold, ', ', nrow(final), ' remaining'))
a = a %>%
tibble::rownames_to_column(var = 'ID') %>%
filter(ID %in% rownames(final)) %>%
tibble::column_to_rownames(var = 'ID')
return(a)
}
}
}
#' @param summarise_for_scatter Logical. Plotting factors can sometimes contain psuedoreplication which inflates the p-value of this scatterplot. This option will summarize the plotting factors by mean, removing psuedoreplication for a more realistic p-value. Default is TRUE.
#' @import dplyr
#' @import tibble
#' @import ggpubr
#' @import ggplot2
#' @importFrom dplyr filter
#' @importFrom rlang :=
#' @importFrom stats prcomp reorder
#' @importFrom utils head
#' @export
plot_pca = function(dat, metadata = NULL, join_by_name = 'Sample', plotting_factors_name = Group, plotting_factors_in = 'col_names', x = 'PC1', y = 'PC2', scale = T, center = T, color = 'Group', fill = 'Group', plot_type = '2D', summarise_for_scatter = T) {
. <- ID <- Group <- NULL
message('Make sure no numeric identifiers are in data as this will drastically impact PCA')
if(any(sapply(dat, is.character)) == T) {
stop('Characters detected in at least one column. Only numeric values allowed. The ID column (GeneID, proteinID, etc.) must be moved to rownames. Also make sure the data is of type "numeric."')
}
plotting_factors_name = enquo(plotting_factors_name)
# join_by_name = enquo(join_by_name)
if(plotting_factors_in == 'col_names') {
dat = t(dat) %>%
as.data.frame() %>%
mutate(across(everything(), as.numeric)) %>%
scale(scale = scale, center = center) %>%
as.matrix()
} else {
dat = dat %>%
as.data.frame() %>%
column_to_rownames(var = Group) %>%
select_if(is.character) %>%
mutate(across(everything(), as.numeric)) %>%
scale(scale = scale, center = center) %>%
as.matrix()
}
dat = prcomp(dat, scale = F, center = F)
scores = dat$x
eigs = dat$sdev^2
var_exp = paste('(', formatC((eigs/sum(eigs))*100, format = 'f', digits = 2), '%', ')', sep = '')
names(var_exp) = colnames(scores)
if(is.null(metadata)){
plot_dat = scores %>%
data.frame() %>%
rownames_to_column(var = join_by_name) %>%
mutate(!!plotting_factors_name := gsub('..$', '', get(join_by_name)))
} else {
plot_dat = scores %>%
data.frame() %>%
rownames_to_column(var = join_by_name) %>%
mutate(!!plotting_factors_name := gsub('..$', '', get(join_by_name))) %>%
left_join(metadata)
}
if(plot_type == '2D') {
p = ggplot(plot_dat, aes(get(x), get(y), color = get(color), group = !!plotting_factors_name, fill = get(fill)))+
geom_point()+
stat_ellipse(geom = 'polygon', alpha = 0.5, level = 0.65)+
# ggforce::geom_mark_ellipse(aes(fill = get(fill), label = !!plotting_factors_name))+
geom_text(aes(label = !!plotting_factors_name), color = 'black', size = 2.5)+
labs(x = paste(x, var_exp[x]), y = paste(y, var_exp[y]), fill = color, color = color)
return(p)
}
if(plot_type == 'boxplot') {
p = ggplot(plot_dat, aes(reorder(!!plotting_factors_name, get(x)), get(x), fill = get(fill)))+
geom_boxplot()+
labs(x = color, y = paste(x, var_exp[x]), fill = color)
return(p)
}
if(plot_type == 'scatter') {
if(summarise_for_scatter == T) {
plot_dat = plot_dat %>%
group_by(!!plotting_factors_name) %>%
summarise_if(is.numeric, mean)
ggscatter(plot_dat, x = x, y = y, add = 'reg.line', color = color)+
stat_cor(label.x = 0, label.y = max(plot_dat[y])*1.1)+
stat_smooth(method = 'lm')+
labs(x = paste(x, var_exp[x]))
} else {
ggscatter(plot_dat, x = x, y = y, add = 'reg.line', color = color)+
stat_cor(label.x = 0, label.y = max(plot_dat[y])*1.1)+
stat_smooth(method = 'lm')+
labs(x = paste(x, var_exp[x]))
}
}
}
dat2 = expression_filter(dat, FilterThreshold = 20)
View(dat2)
dat3 = edgeR::cpm(dat2)
View(dat3)
plot_pca(dat3)
